import Table from '@/components/ui/Table'
import dayjs from 'dayjs'
import { TOKEN_URL } from '@/constants/app.constant'
import { Button, Tooltip } from '@/components/ui'

import coinLogo from '@/assets/image/bitcoin.png'

const textAboutCoin = `Farm Airdrops at the click of a button. Sybulls is a first-of-its-kind automated airdrop farming toolkit. Sybulls is a first-of-its-kind automated airdrop farming toolkit. With our platform, you can continuously farm airdrops from the top DeFi projects in the space.

Benefits:

Holding $SYBL grants you a 30% revenue share with the protocol
Revenue is generated through multiple sources discussed below

Revenue Sources - Platform usage fees, .011 ETH per wallet per month to use the software.

$SYBL Volume Rewards. 1% of fees generated from token taxes go directly to holders

Airdrop Rewards. Free users are able to use the platform in return for 20% of any airdrops they receive. We share this 20% among all token holders with 50% of these airdrop returns being distributed to holders directly. Snapshots for airdrop returns are taken at the time the airdrop is distributed.

REDACTED. 50% of fees generated by REDACTED will be distributed to holders.

Airdrop Rewards. Free users are able to use the platform in return for 20% of any airdrops they receive. We share this 20% among all token holders with 50% of these airdrop returns being distributed to holders directly. Snapshots for airdrop returns are taken at the time the airdrop is distributed.

REDACTED. 50% of fees generated by REDACTED will be distributed to holders.

Legal. This does not constitute financial advice nor should this be considered an investment. Sybulls makes no guarantees neither express or implied. $SYBL is a utility token which grants discounts to the platform and nothing further.`

const { Tr, Th, Td, THead, TBody } = Table

const dataTable = [
    {
        tokenName: 'Candy Chain Coin (WCCC)',
        contract: '0x70A8546f70d404AFa13912CD4f35584f56fe03cc',
        toUpdate: {
            name: 'Coin (WCCC)',
            logoSrc: coinLogo,
            about: textAboutCoin,
            website: 'http:/test',
            discord: 'discordTest',
            facebook: 'facebookTest',
        },
    },
]

type TDataTable = typeof dataTable

const btnControlsRender = (data: TDataTable) => {
    const controlsNodes: React.ReactNode[] = []
    data.map((coin) => {
        const controlItem = (
            <div>
                <div>
                    <Button
                        onClick={() => onBtnDeleteClick(coin.contract)}
                        className="mr-2 mb-2"
                        variant="twoTone"
                        color="red-600"
                    >
                        Delete
                    </Button>
                </div>
                <div>
                    <Button
                        onClick={() => onBtnApproveClick(coin.toUpdate)}
                        className="mr-2 mb-2"
                        variant="twoTone"
                        color="green-600"
                    >
                        Approve
                    </Button>
                </div>
            </div>
        )
        controlsNodes.push(controlItem)
    })

    return controlsNodes
}

const onBtnDeleteClick = (contract: TDataTable[0]['contract']) => {
    console.log(contract, 'contract')
}

const onBtnApproveClick = (dataToUpdate: TDataTable[0]['toUpdate']) => {
    console.log(dataToUpdate)
}

const dataTableRender = () => {
    return dataTable.map((row) => {
        return (
            <Tr>
                <Td>
                    <a
                        className={'underline'}
                        href={TOKEN_URL + row.contract}
                        target={'_blank'}
                    >
                        {row.tokenName}
                    </a>
                </Td>
                <Td>{updateDataRender(dataTable)}</Td>
                <Td>{btnControlsRender(dataTable)}</Td>
            </Tr>
        )
    })
}

const updateDataRender = (dataCoins: TDataTable) => {
    const toUpdateNodes: React.ReactNode[] = []

    dataCoins.map((coin) => {
        const toUpdate = coin.toUpdate
        const updateNameItem = toUpdate.name
        const updateLogoItem = toUpdate.logoSrc
        const updateAboutItem = toUpdate.about

        if (updateLogoItem.length) {
            const imgNewLogo = (
                <img src={updateLogoItem} alt={updateNameItem || 'coin logo'} />
            )
            const updateItem = (
                <div>
                    <Tooltip title={imgNewLogo}>
                        <span className="cursor-pointer">Logo</span>
                    </Tooltip>
                </div>
            )
            toUpdateNodes.push(updateItem)
        }

        if (updateAboutItem.length) {
            const updateItem = (
                <div>
                    <Tooltip
                        placement={'bottom'}
                        className={
                            'whitespace-break-spaces overflow-y-scroll min-w-[380px] max-h-[300px] lg:min-w-[90%] lg:max-h-max'
                        }
                        title={updateAboutItem}
                    >
                        <span className="cursor-pointer">Description</span>
                    </Tooltip>
                </div>
            )
            toUpdateNodes.push(updateItem)
        }
        for (const prop in toUpdate) {
            if (prop !== 'logoSrc' && prop !== 'about') {
                const updateItem = (
                    <div className={'text-white'}>
                        <span>{prop}: </span>
                        <span>
                            {toUpdate[prop as keyof TDataTable[0]['toUpdate']]}
                        </span>
                    </div>
                )
                toUpdateNodes.push(updateItem)
            }
        }
    })

    return toUpdateNodes
}

const TokenUpdatesTable = () => {
    return (
        <div className={'mt-6'}>
            <h3 className={'mb-4'}>Token Updates</h3>
            <Table compact>
                <THead>
                    <Tr>
                        <Th>Coin</Th>
                        <Th>Update data</Th>
                        <Th>Action</Th>
                    </Tr>
                </THead>
                <TBody>{dataTableRender()}</TBody>
            </Table>
        </div>
    )
}
export default TokenUpdatesTable
